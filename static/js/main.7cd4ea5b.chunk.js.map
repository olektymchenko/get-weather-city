{"version":3,"sources":["components/Info.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","React","Component","Form","props","onSubmit","weatherMethod","type","name","placeholder","Weather","city","className","country","temp","sunset","error","App","gettindWeather","e","preventDefault","target","elements","value","fetch","then","data","json","dateSunSet","Date","setTime","sys","sunSetTime","getHours","getMinutes","getSeconds","setState","main","undefined","state","county","this","sunrise","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"ufAYeA,E,4UARP,OACI,6BACI,2CACA,+D,GALGC,IAAMC,WCYVC,EAZF,SAACC,GACV,OACI,6BACI,0BAAMC,SAAUD,EAAME,eAClB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,oBAC3C,4CCQDC,EAbC,SAACN,GACb,OAAQ,6BACHA,EAAMO,MACH,yBAAKC,UAAU,WACX,0CAAgBR,EAAMO,KAAtB,KAA8BP,EAAMS,SACpC,2CAAiBT,EAAMU,KAAvB,OACA,uCAAaV,EAAMW,SAG3B,2BAAIX,EAAMY,S,wQCJlB,IA6DeC,E,uNA1DX,aAAe,IAAD,8BACV,gBASJC,eAAiB,SAACC,GACdA,EAAEC,iBACF,IAAMT,EAAOQ,EAAEE,OAAOC,SAASX,KAAKY,MAChCZ,EACAa,MAAM,qDAAD,OAAsDb,EAAtD,kBAjBD,mCAiBC,kBAA4Fc,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAAQF,MAAK,SAAAC,GAE5H,IAAIE,EAAa,IAAIC,KACrBD,EAAWE,QAAQJ,EAAKK,IAAIhB,QAC5B,IAAIiB,EAAaJ,EAAWK,WAAa,IAAML,EAAWM,aAAe,IAAMN,EAAWO,aAC1F,EAAKC,SAAS,CACVtB,KAAMY,EAAKW,KAAKvB,KAChBH,KAAMe,EAAKlB,KACXK,QAASa,EAAKK,IAAIlB,QAClBE,OAAQiB,EACRhB,WAAOsB,OAKf,EAAKF,SAAS,CACVtB,UAAMwB,EACN3B,UAAM2B,EACNzB,aAASyB,EACTvB,YAAQuB,EACRtB,MAAO,qBAhCf,EAAKuB,MAAQ,CACT5B,KAAM,GACNI,OAAQ,GACRD,KAAM,GACN0B,OAAQ,GACRxB,WAAOsB,GAPD,E,qDA0CV,OACI,yBAAK1B,UAAU,WACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBAAf,IAAgC,kBAAC,EAAD,OAChC,yBAAKA,UAAU,iBAAgB,kBAAC,EAAD,CAAMN,cAAemC,KAAKvB,iBACrD,kBAAC,EAAD,CAASJ,KAAM2B,KAAKF,MAAMzB,KAAMH,KAAM8B,KAAKF,MAAM5B,KAAME,QAAS4B,KAAKF,MAAM1B,QAASE,OAAQ0B,KAAKF,MAAMxB,OAAQ2B,QAASD,KAAKF,MAAMG,QAAS1B,MAAOyB,KAAKF,MAAMvB,iB,GAlD5Kf,IAAMC,WCGJyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACL2C,QAAQ3C,MAAMA,EAAM4C,a","file":"static/js/main.7cd4ea5b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Info extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Weather App</h2>\r\n                <p>Check weather in your city!</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default Info;","import React from 'react';\r\n\r\nconst Form = (props) => {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.weatherMethod}>\r\n                <input type=\"text\" name=\"city\" placeholder=\"Enter your city\" />\r\n                <button>Enter</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Weather = (props) => {\r\n    return (<div>\r\n        {props.city &&\r\n            <div className=\"weather\">\r\n                <h2> Location: {props.city}, {props.country}</h2>\r\n                <p>Temperature: {props.temp} C*</p>\r\n                <p>Sunset : {props.sunset}</p>\r\n            </div>\r\n        }\r\n        <p>{props.error}</p>\r\n    </div>);\r\n}\r\n\r\nexport default Weather;","import React from \"react\"\r\nimport Info from './components/Info'\r\nimport Form from \"./components/Form\"\r\nimport Weather from \"./components/Weather\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport './App.css'\r\n\r\nconst API_KEY = '405ebaa8384af439f639acee14422af7'\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            city: '',\r\n            sunset: '',\r\n            temp: '',\r\n            county: '',\r\n            error: undefined\r\n        }\r\n    }\r\n    gettindWeather = (e) => {\r\n        e.preventDefault();\r\n        const city = e.target.elements.city.value;\r\n        if (city) {\r\n            fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`).then(data => data.json()).then(data => {\r\n\r\n                let dateSunSet = new Date();\r\n                dateSunSet.setTime(data.sys.sunset);\r\n                let sunSetTime = dateSunSet.getHours() + \":\" + dateSunSet.getMinutes() + \":\" + dateSunSet.getSeconds();\r\n                this.setState({\r\n                    temp: data.main.temp,\r\n                    city: data.name,\r\n                    country: data.sys.country,\r\n                    sunset: sunSetTime,\r\n                    error: undefined\r\n                });\r\n\r\n            })\r\n        } else {\r\n            this.setState({\r\n                temp: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                sunset: undefined,\r\n                error: \"Enter City name\"\r\n            });\r\n        }\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"wrapper\">\r\n                <div className=\"container\">\r\n                    <div className=\"main\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-5 info\"> <Info /></div>\r\n                            <div className=\"col-sm-7 form\"><Form weatherMethod={this.gettindWeather} />\r\n                                <Weather temp={this.state.temp} city={this.state.city} country={this.state.country} sunset={this.state.sunset} sunrise={this.state.sunrise} error={this.state.error} /></div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}